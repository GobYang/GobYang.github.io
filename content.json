{"meta":{"title":"GobYang","subtitle":null,"description":"","author":"GobYang","url":"http://yoursite.com"},"pages":[{"title":"About","date":"2016-12-24T08:15:59.000Z","updated":"2016-12-24T08:45:15.073Z","comments":false,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"Hi,我是GobYang,是一个非科班的程序员，目前主要是PHP开发相关的工作。 工作中总是会遇到一些问题，有时候会各种搜索、填坑找到解决办法，然后复制或记录在记事本上面，久了多了都忘了，总感觉不实在，所以希望通过博客笔记形式加深印象记录在这里。 此博客是基于NodeJS的博客框架-Hexo构建而成,感谢开源大大们! 联系方式：社交：Weibo Email：me#thaidh.com Github：github"},{"title":"tags","date":"2016-12-24T08:03:07.000Z","updated":"2016-12-24T08:04:31.862Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Github的SSH和HTTPS记住账号密码方法","slug":"Github的SSH和HTTPS记住账号密码方法","date":"2015-12-24T07:58:08.000Z","updated":"2016-12-24T08:43:17.484Z","comments":true,"path":"2015/12/24/Github的SSH和HTTPS记住账号密码方法/","link":"","permalink":"http://yoursite.com/2015/12/24/Github的SSH和HTTPS记住账号密码方法/","excerpt":"其实关于这两种认证方式也是适用于Gitlab等相关git.很多时候，我们在打算克隆一个仓库到本地的时候，有两种方式可以选择，即：SSH和HTTPS.克隆还好，但是需要推送的时候，也许会遇到权限，需要账号密码啊。 通过HTTPS方式克隆的代码到本地如果遇到：1error: The requested URL returned error: 403 Forbidden while accessing 这是权限问题，可以修改.git/config文件追加用户名和密码，也可以直接敲下面命令：1git remote set-url origin https://youruser:password@github.com/user/repo.git","text":"其实关于这两种认证方式也是适用于Gitlab等相关git.很多时候，我们在打算克隆一个仓库到本地的时候，有两种方式可以选择，即：SSH和HTTPS.克隆还好，但是需要推送的时候，也许会遇到权限，需要账号密码啊。 通过HTTPS方式克隆的代码到本地如果遇到：1error: The requested URL returned error: 403 Forbidden while accessing 这是权限问题，可以修改.git/config文件追加用户名和密码，也可以直接敲下面命令：1git remote set-url origin https://youruser:password@github.com/user/repo.git 其实更常用的是SSH的方式来推送代码： 首先需要生成 SSH Keys，需要用到 ssh-keygen 命令。1ssh-keygen -t rsa -C &quot;xxx@qq.com&quot; -f ~/.ssh/git-github 简单介绍下参数含义： -t 指定密钥类型，默认即 rsa ，可以省略-C 设置注释文字，比如你的邮箱-f 指定密钥文件存储文件名，会生成 git-github 和 git-github.pub 两个密钥文件 回车后，遇到提示输入 yes 即可，剩下一路回车，密钥文件就在指定路径下生成了。 接下来就去git管理界面的设置里面将 SSH 公钥添加到 Github设置里面把git-github.pub公钥的内容复制进去添加就行了。 本地添加SSH别名如果本机有其它密钥，连接 github 时可能不会自动使用刚生成的密钥，需要设置别名： $ sudo vi ~/.ssh/config加入类似的一段代码： 12345host git-github user git hostname github.com port 22 identityfile ~/.ssh/git-github 保存退出。 测试连接1ssh -T git-github Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 表示设置的 SSH Keys 认证通过，但 Github 不提供 shell 访问。此时就可以正常使用 Github 了。","categories":[],"tags":[{"name":"Git","slug":"Git","permalink":"http://yoursite.com/tags/Git/"},{"name":"GitHub","slug":"GitHub","permalink":"http://yoursite.com/tags/GitHub/"}]},{"title":"linux学习笔记之vim","slug":"linux学习笔记之vim","date":"2015-03-17T14:52:07.000Z","updated":"2016-12-24T13:31:11.782Z","comments":true,"path":"2015/03/17/linux学习笔记之vim/","link":"","permalink":"http://yoursite.com/2015/03/17/linux学习笔记之vim/","excerpt":"一、Vim常用操作Vim是一个功能强大的全屏幕文本编辑器。是linux/unix上最常用的文本编辑器。它的作用是建立、编辑、显示文本文件。 Vim没有菜单，只有命令！ Vim三个工作模式： 命令模式 vi filename 进去命令模式 输入:wq保存退出 插入模式 当你在命令模式的时候，输入插入命令 i a o就可以进入插入模式，进入插入模式的标志是下方出现了INSERT字样。按ESC退出。 编辑模式 当你是命令模式的时候，按一个冒号 &apos;:&apos;就可以进入编辑模式。比如set number命令设置行号 设置完就回到命令模式","text":"一、Vim常用操作Vim是一个功能强大的全屏幕文本编辑器。是linux/unix上最常用的文本编辑器。它的作用是建立、编辑、显示文本文件。 Vim没有菜单，只有命令！ Vim三个工作模式： 命令模式 vi filename 进去命令模式 输入:wq保存退出 插入模式 当你在命令模式的时候，输入插入命令 i a o就可以进入插入模式，进入插入模式的标志是下方出现了INSERT字样。按ESC退出。 编辑模式 当你是命令模式的时候，按一个冒号 &apos;:&apos;就可以进入编辑模式。比如set number命令设置行号 设置完就回到命令模式 插入命令： 命令 作用 a 在光标所在字符后插入 A 在光标所在行尾插入 i 在光标所在字符前插入 I 在光标所在行行首插入 o 在光标下面插入新行 O 在光标上面插入新行 定位命令： 命令 作用 :set nu 设置行号 :set nonu 取消行号 gg 到第一行 G 到最后一行 nG 到第n行 :n 到第n行 $ 移至行尾 0 移至行首 删除命令： 命令 作用 x 删除光标所在处字符 nx 删除光标所在处后n个字符 dd 删除光标所在行 ndd删除n行 dG 删除光标所在行到文件末尾内容 D 删除光标所在处到行尾内容 :n1,n2d 删除n1行到n2行指定范围的行 复制和剪切命令 命令 作用 yy 复制当前行 nyy 复制当前行以下n行 dd 剪切当前行 ndd 复制当前行以下n行 p或P 粘贴在当前光标所在行下或行上 替换和取消命令 命令 作用 r 取代光标所在处字符 R 从光标所在处开始替换字符，按Esc结束 【下方会出现replace字符】 u 取消上一步操作 搜索和搜索替换命令 命令 作用 /string 1:搜索指定的字符串 2：搜索时忽略大小写 :set ic n 搜索指定字符串的下一个出现位置 :%s/old/new/g 全文替换指定字符串 :n1,n2s/old/new/g 在一定范围内替换指定字符串 :替换范围 %s 全文替换 起始行,终止行 s /要替换的字符串/替换的新的字符串/g c 询问确认 保存和退出命令 命令 作用 :w 保存修改 :W new_filename 另存为指定文件 :wq 保存修改并退出 ZZ 快捷键，保存修改并退出 :q! 不保存修改退出 :wq! 保存修改并退出（文件所有者及root可使用） 二、Vim常用技巧–技巧1———————————————–:r 文件名 ----把文件内容导入到刚刚光标所在的位置 :! 命令 -----可以执行命令 例如 :!which ls ----可以查看ls命令所在位置 可以把以上结合起来，可以把一个命令执行结果导入文件中 :r !命令 –技巧2———————————————–定义快捷键 :map 快捷键 触发命令 范例： :map ^P I#&lt;ESC&gt; 定义快捷键位ctrl+P 触发的命令为 I跳到行首并进入插入模式，然后插入#号，然后进入到命令模式 :map ^B 0x 定义快捷键ctrl+B 触发的命令为 0光标跳到行首并删除光标所在的字符 即可实现：删除注释 注意：快捷键一般跟ctrl结合起来 这里的^不是数字6那个 实际是ctrl+v 可以结合快捷键三个键一起按！ –技巧3———————————————–连续行注释 :n1,n2s/^/#/g 连续多行注释 :n1,n2s/^#//g 去掉连续多行的注释 :n1,n2s/^/\\/\\//g 有些程序我们需要//注释的时候 可以连续多行这个命令 –技巧4———————————————–替换 :ab mymail 763191973@qq.com 在用vim编辑器执行 以上 当我们在插入模式 的时候 输入mymail的时候 一回车就会变成了763191973@qq.com 注意!!!!：如果有定义的快捷键 ab在重启的时候 会发现都消失 如果你想永久有效 需要写在每个用户的宿主目录下面的家目录下面的配置文件里面。如果是root就在/root目录下面，如果是其他用户就在/home/xx下面。文件.vimrc 可以存放一些编辑模式的命令 快捷键 ab","categories":[],"tags":[{"name":"Linux","slug":"Linux","permalink":"http://yoursite.com/tags/Linux/"},{"name":"VIM","slug":"VIM","permalink":"http://yoursite.com/tags/VIM/"}]},{"title":"JS如何判断一个页面是否已经打开?","slug":"JS如何判断一个页面是否已经打开","date":"2015-01-23T07:18:28.000Z","updated":"2016-12-24T09:18:49.352Z","comments":true,"path":"2015/01/23/JS如何判断一个页面是否已经打开/","link":"","permalink":"http://yoursite.com/2015/01/23/JS如何判断一个页面是否已经打开/","excerpt":"一种是刷新之后又会重新打开页面：12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; var objWin; function openPage() &#123; var target = &quot;http://www.baidu.com&quot;; //判断是否打开 if (objWin == null || objWin.closed) &#123; objWin = window.open(target); &#125; else &#123; objWin.location.replace(target); &#125; //objWin.focus(); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;javascript:openPage();&quot;&gt;打开页面&lt;/a&gt; &lt;/body&gt;&lt;/html&gt;","text":"一种是刷新之后又会重新打开页面：12345678910111213141516171819202122232425&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=&quot;text/javascript&quot;&gt; var objWin; function openPage() &#123; var target = &quot;http://www.baidu.com&quot;; //判断是否打开 if (objWin == null || objWin.closed) &#123; objWin = window.open(target); &#125; else &#123; objWin.location.replace(target); &#125; //objWin.focus(); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;a href=&quot;javascript:openPage();&quot;&gt;打开页面&lt;/a&gt; &lt;/body&gt;&lt;/html&gt; 一种更完美一点的方案(刷新之后也不会再重新打开)： index.html 12345678910&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;input type=&quot;button&quot; value=&quot;open&quot; onclick=&quot;window.open(&apos;proxy.html&apos;,&apos;tag&apos;)&quot;&gt;&lt;/body&gt;&lt;/html&gt; proxy.html 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;target页面&lt;/title&gt; &lt;script&gt; if(window.parent.name!=&quot;msg&quot;) &#123; window.location.href=&quot;target.html&quot;;//这才是你的显示页面 &#125; else &#123; window.parent.focus(); &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt;proxy&lt;/body&gt;&lt;/html&gt; target.html 1234567891011121314151617&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;title&gt;&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h3&gt;target页面&lt;/h3&gt;&lt;script&gt; window.name=&quot;msg&quot;;&lt;/script&gt;message page&lt;iframe src=&quot;&quot; name=&quot;tag&quot; style=&quot;display:none&quot;&gt;&lt;/iframe&gt;&lt;/body&gt;&lt;/html&gt;","categories":[],"tags":[{"name":"Javascript","slug":"Javascript","permalink":"http://yoursite.com/tags/Javascript/"}]}]}